{# Configure K8s Host installation YAML file for epicctl #}
{% for host in hosts_to_add if host not in groups.repair_pool or force_repair is defined and force_repair %}
---
op: K8sHostConfig
platform: {{ platform.type }}
parameters:
  config:
{% if (host in ecp_k8s.master_nodes.hosts) or (hostvars[host].ansible_host in ecp_k8s.master_nodes.hosts) %}
    ephemeral_disks: {{ecp_k8s.master_nodes.disks.ephemeral_disks|join(',') }}
{% if ecp_k8s.master_nodes.no_tenant_storage or ecp_k8s.master_nodes.disks.persistent_disks is not iterable %}
    persistent_disks:
{% else %}
    persistent_disks: {{ ecp_k8s.master_nodes.disks.persistent_disks|join(',') }}
{% endif %}
{% elif ecp_k8s.ingress_nodes.hosts is defined and ((host in ecp_k8s.ingress_nodes.hosts) or (hostvars[host].ansible_host in ecp_k8s.ingress_nodes.hosts)) %}
    ephemeral_disks: {{ecp_k8s.ingress_nodes.disks.ephemeral_disks|join(',') }}
{% if ecp_k8s.ingress_nodes.no_tenant_storage or ecp_k8s.ingress_nodes.disks.persistent_disks is not iterable %}
    persistent_disks:
{% else %}
    persistent_disks: {{ ecp_k8s.ingress_nodes.disks.persistent_disks|join(',') }}
{% endif %}
{% elif ecp_k8s.cp_nodes.hosts is defined and ((host in ecp_k8s.cp_nodes.hosts) or (hostvars[host].ansible_host in ecp_k8s.cp_nodes.hosts))  %}
    ephemeral_disks: {{ecp_k8s.cp_nodes.disks.ephemeral_disks|join(',') }}
{% if ecp_k8s.cp_nodes.no_tenant_storage or ecp_k8s.cp_nodes.disks.persistent_disks is not iterable %}
    persistent_disks:
{% else %}
    persistent_disks: {{ ecp_k8s.cp_nodes.disks.persistent_disks|join(',') }}
{% endif %}
{% elif (host in ecp_k8s.worker_nodes.hosts) or (hostvars[host].ansible_host in ecp_k8s.worker_nodes.hosts)  %}
    ephemeral_disks: {{ecp_k8s.worker_nodes.disks.ephemeral_disks|join(',') }}
{% if ecp_k8s.worker_nodes.no_tenant_storage or ecp_k8s.worker_nodes.disks.persistent_disks is not iterable %}
    persistent_disks:
{% else %}
    persistent_disks: {{ ecp_k8s.worker_nodes.disks.persistent_disks|join(',') }}
{% endif %}
{% else %}
{% endif %}
    api_scheme: {{ platform.api_scheme }}
    install_type: {{ platform.install.install_type }}
{% set have_tags = false %}
{% if hostvars[host].tag_dc is defined or hostvars[host].tag_rack is defined or hostvars[host].tag_ru is defined or hostvars[host].tag_zone is defined %}
    tags:
{% set have_tags = true %}
{% endif %}
{% if hostvars[host].tag_dc is defined %}
      - name: dc_tag
        value: {{ hostvars[host].tag_dc }}
      - name: topology.kubernetes.io/region
        value: {{ hostvars[host].tag_dc }}
{% endif %}
{% if hostvars[host].tag_zone is defined %}
      - name: zone_tag
        value: {{ hostvars[host].tag_zone }}
      - name: topology.kubernetes.io/zone
        value: {{ hostvars[host].tag_zone }}
{% endif %}
{% if hostvars[host].tag_rack is defined %}
      - name: rack_tag
        value: {{ hostvars[host].tag_rack }}
{% endif %}
{% if hostvars[host].tag_ru is defined %}
      - name: ru_tag
        value: {{ hostvars[host].tag_ru }}
{% endif %}
{% if ecp_k8s.cluster.ingress_nodes is defined and hostvars[host].ansible_host in ecp_k8s.cluster.ingress_nodes %}
{% if have_tags == false %}
    tags:
{% set have_tags = true %}
{% endif %}
      - name: istio-ingressgateway
        value: true
{% endif %}
{% if ecp_k8s.cluster.cp_nodes is defined and hostvars[host].ansible_host in ecp_k8s.cluster.cp_nodes %}
{% if have_tags == false %}
    tags:
{% set have_tags = true %}
{% endif %}
      - name: istio-controlplane
        value: true
      - name: openebs-controlplane
        value: true
{% endif %}
  host:
{% if host | ipv4 %}
    internal_ip: {{ host }}
{% else %}
    internal_ip: {{ hostvars[host].ansible_host }}
{% endif %}
  ssh:
    username: {{ ecp_credentials.ssh.username }}
    access_type: {{ ecp_credentials.ssh.access_type }}
{% if ecp_credentials.ssh.access_type == 'password_access' %}
    password: {{ ecp_credentials.ssh.password }}
{% else %}
    keypair_file: {{ ecp_credentials.ssh.keypair_file }}
    keypair_name: {{ ecp_credentials.ssh.keypair_name }}
{% if ecp_credentials.ssh.key_passphrase is defined %}
    priv_keypair_password: {{ ecp_credentials.ssh.key_passphrase }}
{% endif %}
{% endif %}
{% endfor %}
  verbose: true