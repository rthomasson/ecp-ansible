---
#
# This playbook adds nodes to a K8s cluster.
# The nodes to be added are designated in the variable: k8s_cluster.nodes_to_add
# The target cluster is designated by the variable: k8s_cluster.target_cluster_name
# NOTE: this playbook does not add K8s hosts to the ECP platform.

# Validate vars for nodes to delete
- fail:
    msg: "Error: Must specify the list of nodes to add to the K8s cluster."
  when: k8s_cluster.nodes_to_remove.list is undefined and k8s_cluster.nodes_to_remove.status is undefined

- name: Obtain session token
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/login"
    return_content: yes
    method: POST
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: { "name": "{{ credentials.site_admin_id }}", "password": "{{ credentials.site_admin_password }}" }
    status_code: 201
  register: session_res

- name: Create a fact with the session info from the API call  
  set_fact:
    session_id: "{{ session_res.location  | urlsplit('path') }}"
    cacheable: True  

# Get the current set of k8shosts 
- name: Get the current set of k8shosts 
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v2/worker/k8shost"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "application/json"
    method: GET
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 200
  register: k8shost_res

- name: Create a fact with parsed list of k8s hosts from the API call  
  set_fact:
    k8shosts_list: "{{ k8shost_res.json | json_query('_embedded.k8shosts[*].{ansible_host: ipaddr, host_id: _links.self.href, hostname: hostname, status: status}') }}"
    cacheable: True  

#- name: Create input file to add K8shost to K8s Cluster.
#  template:
#    src: add_k8s_hosts_to_cluster.j2
#    dest: "/tmp/{{ platform.name }}_add_k8s_hosts_to_cluster.json"
#    mode: 0777
    
 # Get the current list of K8s clusters 
- name: Get the current set of K8s clusters 
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v2/k8scluster"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "application/json"
    method: GET
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 200
  register: k8scluster_res

- name: Create a fact with the list of K8s cluster from the API call  
  set_fact:
    k8scluster_list: "{{ k8scluster_res.json }}"
    cacheable: True
    
# Parse the k8s cluster name and ID from the JSON result of the GET k8scluster call and set target cluster ID
- name: Parse the K8s cluster name and ID from the JSON result of the GET k8scluster call
  set_fact:
    # set the id of the cluster to add the nodes to if it matches the name of the supplied cluster
    target_cluster_id: "{{ item | json_query('cluster_id') }}"
    cacheable: true
  when: item | json_query('cluster_name') == k8s_cluster.target_cluster_name
  loop: "{{ k8scluster_list | json_query('_embedded.k8sclusters[*].{cluster_name: label.name, cluster_id: _links.self.href}') }}"

- debug:
    msg:
      - "*** K8s cluster to add nodes to: ***"
      - "{{ k8s_cluster.target_cluster_name }}"

- fail:
    msg: "Error - The specified cluster name: [{{ k8s_cluster.target_cluster_name }}] does not match an existing K8s cluster"
  when: target_cluster_id is undefined

# Create a fact for the JSON that will be used in the REST API call to add the nodes
- name: Create empty list
  set_fact:
    nodes_to_add_JSON: "{{ lookup('template','add_nodes_to_k8s_cluster.j2') }}"
    cacheable: True  

- debug:
      msg:
      - "*** K8s nodes to add to the {{ k8s_cluster.target_cluster_name }} K8s cluster***"
      - "{{ nodes_to_add_JSON | to_nice_yaml }}"

- name: Add K8s nodes to Cluster
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080{{ target_cluster_id }}/change_task"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "*/*"
      Content-Type: "application/json"
    method: POST
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: "{{ nodes_to_add_JSON }}"
    status_code: 204
  register: cluster_res

#  - name: Poll the status of cluster creation by making get call to /api/v2/k8scluster/k8scluster_id
#    command: epicctl api get -u {{ jsonResp }} -n "OnPremSetup" -p {{ platform.type }} -o /tmp/get-response.json
#    vars:
#      getResp: "{{ (lookup('file', '/tmp/get-response.json') | from_json)['status'] }}"
#    register : res
#    failed_when: res.rc != 0
#    changed_when: false
#    retries: 30
#    delay: 60
#    until:  '"ready" == getResp'

#  - debug:
#      msg: "polling task finished"

- name: Log out of session
  uri:
    url: "{{ session_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
    method: DELETE
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 204
  register: session_res

- debug:
    msg: "Add K8s host to Cluster finished."
