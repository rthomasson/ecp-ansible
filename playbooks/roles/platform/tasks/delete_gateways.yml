---
#
# This playbook deletes the designated ECP Gateway hosts from the platform
# It uses platform, ecp_credentials and ecp_epic variables 

# Validate vars for nodes to delete
- fail:
    msg: "Error: Specify either a list of ECP gateway hosts to delete OR a status to use but not both"
  when: 
    - ecp_epic.hosts_to_delete.list is defined  
    - ecp_epic.hosts_to_delete.status is defined

- fail:
    msg: "Error: You must provide either a list of ECP gateway hosts to delete or a host status that will be used to delete all ECP Gateway hosts in that status"
  when: 
    - (ecp_epic.hosts_to_delete.list is undefined or ecp_epic.hosts_to_delete.list is not iterable)
    - (ecp_epic.hosts_to_delete.status is undefined)


- name: Obtain session token
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/login"
    return_content: yes
    method: POST
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: { "name": "{{ ecp_credentials.site_admin_id }}", "password": "{{ ecp_credentials.site_admin_password }}" }
    status_code: 201
  register: session_res

- name: Create a fact with the session info from the API call  
  set_fact:
    session_id: "{{ session_res.location  | urlsplit('path') }}"
    cacheable: True  

# Get the current set of EPIC worker hosts 
- name: Get the current set of EPIC worker hosts 
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/workers"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "application/json"
    method: GET
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 200
  register: epic_hosts_res

- name: Create a fact with the list of the current set of EPIC hosts  
  set_fact:
    epic_hosts_list: "{{ epic_hosts_res.json | json_query('_embedded.workers[*].{ansible_host: ip, host_id: _links.self.href, hostname: hostname, state: state, purpose: purpose, tags: tags}') }}"

# At this point, epic_hosts_list contains all the EPIC hosts in the platform
# Next, create the list of host ids to delete 
- name: Create empty list
  set_fact:
    epic_ids_to_delete: []
    cacheable: True

- name: Populate the list of hosts to delete. The list will contain only the host IDs of gateway machines.
  set_fact:
    epic_ids_to_delete: "{{ epic_ids_to_delete + [item | json_query('host_id')] }}"
    cacheable: True
  when: (item | json_query('purpose') == 'proxy')
  loop: "{{ epic_hosts_list }}"

- debug:
    msg:
    - "*** Deleting ECP Gateway Hosts ***"
    - "*** List of hosts to delete: "
    - "{{ epic_ids_to_delete }}"
  when: epic_ids_to_delete is iterable and epic_ids_to_delete|length > 0 

- debug:
    msg:
    - "*** Nothing to do. No ECP Gateway Hosts exist. ***"
  when: epic_ids_to_delete is not iterable or epic_ids_to_delete|length < 1 

- name: Delete ECP Gateway hosts from platform
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080{{ item }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}"
      Content-Type: "application/json"
    method: DELETE
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 204
  register: cluster_res
  loop: "{{ epic_ids_to_delete }}"


- name: Log out of session
  uri:
    url: "{{ session_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
    method: DELETE
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 204
  register: session_res
