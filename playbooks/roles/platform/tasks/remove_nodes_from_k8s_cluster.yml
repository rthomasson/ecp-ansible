---
#
# This playbook removes nodes from a K8s cluster.
# The nodes to be removed are designated in the variable: k8s_cluster.nodes_to_remove
# The target cluster is designated by the variable: k8s_cluster.target_cluster_name
# NOTE: this playbook does not delete the K8s host from the ECP platform.
#
# TODO: Add ability to specify a node state (e.g., "config_error") for nodes to delete

# Validate vars for nodes to delete
- fail:
    msg: "Error: Specify only node_list OR node_status"
  when: k8s_cluster.nodes_to_remove.list is defined and k8s_cluster.nodes_to_remove.status is defined

- fail:
    msg: "Error: Must specify either node_list OR node_status"
  when: k8s_cluster.nodes_to_remove.list is undefined and k8s_cluster.nodes_to_remove.status is undefined

- name: Obtain session token
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/login"
    return_content: yes
    method: POST
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: { "name": "{{ credentials.site_admin_id }}", "password": "{{ credentials.site_admin_password }}" }
    status_code: 201
  register: session_res

- name: Create a fact with the session info from the API call  
  set_fact:
    session_id: "{{ session_res.location  | urlsplit('path') }}"
    cacheable: True  

 # Get the current list of K8s clusters 
- name: Get the current set of K8s clusters 
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v2/k8scluster"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "application/json"
    method: GET
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 200
  register: k8scluster_res

- name: Create a fact with the list of K8s cluster from the API call  
  set_fact:
    k8scluster_list: "{{ k8scluster_res.json }}"
    cacheable: True
    
# Parse the k8s cluster name and ID from the JSON result of the GET k8scluster call and set target cluster ID
- name: Parse the K8s cluster name and ID from the JSON result of the GET k8scluster call
  set_fact:
    # set the id of the cluster to delete if it matches the name of the supplied cluster
    target_cluster_id: "{{ item | json_query('cluster_id') }}"
    cacheable: true
  when: item | json_query('cluster_name') == k8s_cluster.target_cluster_name
  loop: "{{ k8scluster_list | json_query('_embedded.k8sclusters[*].{cluster_name: label.name, cluster_id: _links.self.href}') }}"

- debug:
    msg:
      - "*** K8s cluster to remove nodes from: ***"
      - "{{ k8s_cluster.target_cluster_name }}"

- fail:
    msg: Error - Specified cluster name -- (k8s_cluster.target_cluster_name) id -- target_cluster_id not found
  when: target_cluster_id is undefined

# Get the current set of k8shosts 
- name: Get the current set of k8shosts 
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v2/worker/k8shost"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "application/json"
    method: GET
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 200
  register: k8shost_res

- name: Create a fact with parsed list of k8s hosts from the API call  
  set_fact:
    k8shosts_list: "{{ k8shost_res.json | json_query('_embedded.k8shosts[*].{ansible_host: ipaddr, host_id: _links.self.href, hostname: hostname, status: status}') }}"
    cacheable: True  

- debug:
    var: k8shosts_list

# At this point, k8shosts_list contains all k8s hosts in the platform
# now create the validated list of nodes to remove, then pass that to the j2 template
# also, accomodate FQDN -> IP
- name: Create empty list
  set_fact:
    k8s_ips_to_remove: []

# NOTE: the list of nodes in k8s_cluster.nodes_to_be_removed.list can contain either hostnames or IP addresses
- name: Create list of validated hosts to remove based on enumerated list of k8s nodes
  set_fact:
    k8s_ips_to_remove: "{{ k8s_ips_to_remove + [item | json_query('host_id')] }}"
  when: k8s_cluster.nodes_to_remove.list is defined and
        (item | json_query('ansible_host') in k8s_cluster.nodes_to_remove.list or 
        item | json_query('hostname') in k8s_cluster.nodes_to_remove.list)
  loop: "{{ k8shosts_list }}"

- name: Create list of validated hosts to remove based on k8s node status
  set_fact:
    k8s_ips_to_remove: "{{ k8s_ips_to_remove + [item | json_query('host_id')] }}"
  when: k8s_cluster.nodes_to_remove.status is defined and
        item | json_query('status') == k8s_cluster.nodes_to_remove.status
  loop: "{{ k8shosts_list }}"

- debug:
      msg:
      - "*** K8s nodes to remove from remove_k8s_nodes.from_cluster ***"
      - "{{ lookup('template', 'remove_k8s_nodes_from_cluster.j2') | to_nice_yaml }}"

- fail:
    msg: Just debugging for now
  when: target_cluster_id is defined

- name: Remove the designated nodes from the K8s Cluster
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080{{ target_cluster_id }}/change_task"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "*/*"
      Content-Type: "application/json"
    method: POST
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: "{{ lookup('template','remove_k8s_nodes_from_cluster.j2') }}"
    status_code: 204
  register: cluster_res

#  - name: Poll the status of cluster creation by making get call to /api/v2/k8scluster/k8scluster_id
#    command: epicctl api get -u {{ jsonResp }} -n "OnPremSetup" -p {{ platform.type }} -o /tmp/get-response.json
#    vars:
#      getResp: "{{ (lookup('file', '/tmp/get-response.json') | from_json)['status'] }}"
#    register : res
#    failed_when: res.rc != 0
#    changed_when: false
#    retries: 30
#    delay: 60
#    until:  '"ready" == getResp'

#  - debug:
#      msg: "polling task finished"

- name: Log out of session
  uri:
    url: "{{ session_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
    method: DELETE
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 204
  register: session_res
