---
- name: Obtain session token
  uri:
    url: http://{{ primary_controller }}:8080/api/v1/login
    return_content: yes
    method: POST
    body_format: json
    body: { "name": "{{ credentials.site_admin_id }}", "password": "{{ credentials.site_admin_password }}" }
    status_code: 201
  register: session_res

- name: Get Kubeconfig for current user
  uri:
    url: http://{{ primary_controller }}:8080/api/v2/k8skubeconfig
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}"  
      accept: "text/yaml"
    method: GET
    status_code: 200
  register: kubeconfig_res
    
#- name: Authenticate k8s cluster user
#  command: kubectl hpecp authenticate
#  register: res
#  failed_when: res.rc != 0


#- name: label openebs controlplane nodes
#  command: kubectl label nodes {{ item }} "openebs.io/nodegroup"="openebs-controlplane"
#  loop: "{{ groups['k8s_openebs_controleplane_nodes'] }}"
#  register: res
#  failed_when: res.rc != 0
  
 #- name: label openebs storage nodes
 # command: kubectl label nodes {{ item }} "openebs.io/nodegroup"="storage-node"
 # loop: "{{ groups['k8s_openebs_storage_nodes'] }}"
 # register: res
 # failed_when: res.rc != 0
  
 #- name: label openebs namespace
 # command: kubectl label  namespace openebs
 # register: res
 # failed_when: res.rc != 0
  
- name: Install openebs 
  command: kubectl apply --kubeconfig={{ kubeconfig_file }} --context {{ kubeconfig_context }} -f {{ k8s.openebs.openebs_manifest_file }}
  register: res
  failed_when: res.rc != 0 
  
- name: Create Openebs Stroage class 
  command: kubectl apply --kubeconfig={{ kubeconfig_file }} --context {{ kubeconfig_context }} -f {{ k8s.openebs.openebs_storage_class_file }} 
  register: res
  failed_when: res.rc != 0
 
- name: Create Openebs Persistant Volume Claim 
  command: kubectl apply --kubeconfig={{ kubeconfig_file }} --context {{ kubeconfig_context }} -f {{ k8s.openebs.openebs_persistant_volume_claim_file }} 
  register: res
  failed_when: res.rc != 0
  
- name: Log out of session
  uri:
    url: "{{ session_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}"  
    method: DELETE
    status_code: 204
  register: delsession_res
  
- debug:
    msg: "End Openebs Install Session: {{ session_res.location  | urlsplit('path') }}"
