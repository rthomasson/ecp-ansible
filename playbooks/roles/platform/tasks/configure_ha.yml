---
# This playbook configures ECP for HA using the designated hosts specified if the ecp_epic.ha_nodes variable
# Validate vars for configuring ECP HA
- fail:
    msg: "Error: In order to configure ECP for HA, you must provide two hosts; one for the Shadow Controller and one for the Arbiter"
  when: 
    (ecp_epic.ha_nodes is undefined) or
    (ecp_epic.ha_nodes.hosts is undefined) or
    (ecp_epic.ha_nodes.hosts is defined and (ecp_epic.ha_nodes.hosts is not iterable or ecp_epic.ha_nodes.hosts|length < 2))  

- name: Obtain session token
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/login"
    return_content: yes
    method: POST
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: { "name": "{{ ecp_credentials.site_admin_id }}", "password": "{{ ecp_credentials.site_admin_password }}" }
    status_code: 201
  register: session_res

- name: Create a fact with the session info from the API call  
  set_fact:
    session_id: "{{ session_res.location  | urlsplit('path') }}"
    cacheable: True  

- debug:
    msg: "Session: {{ session_res.location  | urlsplit('path') }}"

- name: Get the current set of EPIC workers 
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/workers"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_id }}" 
      accept: "application/json"
    method: GET
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 200
  register: workers_res

- name: Create a fact with parsed list of EPIC workers from the API call  
  set_fact:
    epic_workers: "{{ workers_res.json | json_query('_embedded.workers[*].{ansible_host: ip, host_id: _links.self.href, hostname: hostname, status: status_info}') }}"
    cacheable: True  

- debug:
    var: epic_workers
    verbosity: 4

- name: Designate the Shadow Controller Host ID (ECP uses an internal ID to identify workers) using the specified host information in the ecp_epic.ha_nodes.shadow_host variable
  set_fact:
    shadow_id: "{{ item | json_query('host_id') }}"
  when: (item | json_query('ansible_host') == ecp_epic.ha_nodes.shadow_host) or 
        (item | json_query('hostname') in ecp_epic.ha_nodes.shadow_host)
  loop: "{{ epic_workers }}"

- name: Designate the Arbiter Controller Host ID (ECP uses an internal ID to identify workers) using the specified host information in the ecp_epic.ha_nodes.arbiter_host variable
  set_fact:
    arbiter_id: "{{ item | json_query('host_id') }}"
  when: (item | json_query('ansible_host') == ecp_epic.ha_nodes.arbiter_host) or 
        (item | json_query('hostname') in ecp_epic.ha_nodes.arbiter_host)
  loop: "{{ epic_workers }}"

- name: Set a fact with the path/filename for the lockdown reason
  set_fact:
    lockdown_reason: '{ "reason": "Configure HA" }'
    cacheable: true  

- debug:
    msg:
    - "The Shadow Controller host ID is: {{ shadow_id }}"
    - "The Arbiter host ID is: {{ arbiter_id }}"
    verbosity: 4

- name: Put the site in lockdown
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/lock"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location | urlsplit('path') }}"  
    method: POST
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: "{{ lockdown_reason }}"
    status_code: 201
  register: lockdown_res

- debug:
    msg: "Enter lockdown API call result: {{ lockdown_res.content }}"

- name: Set a fact with the file contents for the HA config json
  set_fact:
    ha_file_contents: "{{ lookup('template', 'configure_ha.j2') }}"
    cacheable: true

- debug:
    msg: 
    - "*** Configuring HA ***"
    - "Input file contents:"
    - "{{ lookup('template', 'configure_ha.j2') }}"

- name: Make REST API call to configure HA
  uri:
    url: "{{ platform.rest_protocol }}://{{ platform.controller }}:8080/api/v1/install?install_ha"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location | urlsplit('path') }}"
      accept: "application/json"
    method: PUT
    validate_certs: "{{ platform.validate_certs }}"
    body_format: json
    body: "{{ ha_file_contents }}"
    status_code: 204
  register: config_ha_res

- debug:
    msg: "Configure HA API call result: {{ config_ha_res.content }}"

- name: Exit site lockdown
  uri:
    url: "{{ lockdown_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}"  
    method: DELETE
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 204
  register: clear_lockdown_res
  until: clear_lockdown_res.status == 204
  retries: 60 # 60 -> 1 hour                60 secs * 15 = 15 minutes
  delay: 60 # wait 1 minute

- debug:
    msg: "Exit lockdown API call result: {{ clear_lockdown_res.content }}"

- name: Log out of session
  uri:
    url: "{{ session_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}"  
    method: DELETE
    validate_certs: "{{ platform.validate_certs }}"
    status_code: 204
  register: delsession_res
