---
- name: Obtain session token
  uri:
    url: http://{{ groups.primary_controller[0] }}:8080/api/v1/login
    return_content: yes
    method: POST
    body_format: json
    body: { "name": "{{ credentials.site_admin_id }}", "password": "{{ credentials.site_admin_password }}" }
    status_code: 201
  register: session_res

# Get the current set of k8shosts and update the host IDs in inventory
- name: Get the current set of k8shosts 
  uri:
    url: http://{{ groups.primary_controller[0] }}:8080/api/v2/worker/k8shost
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}" 
      accept: "application/json"
    method: GET
    status_code: 200
  register: k8shost_res

# Parse the k8s Host ID and IP address from the JSON result of the GET k8shost call
- name: Parse the k8s Host ID and IP address
  set_fact:
    hcp_host_id: "{{ item | json_query('host_id') | from_json }}"
    k8s_ip_addr: "{{ item | json_query('ansible_host') | from_json }}"
  delegate_facts: yes
  delegate_to: "{{ item | json_query('hostname') }}"
  loop: "{{ k8shost_res.json | json_query('_embedded.k8shosts[*].{ansible_host: ipaddr, host_id: _links.self.href, hostname: hostname}') }}"
  register: host_id_list

- debug: 
    msg: "Hostname: {{ groups.k8s_master_nodes[0] }} Host ID: {{ hostvars[groups.k8s_master_nodes[0]].hcp_host_id }}"

- debug:
    msg: "List of Host IDs:{{ host_id_list.results }}"

#- name: Create inputfile to create K8s Cluster.
#  template:
#    src: create_k8s_cluster.j2
#    dest: "/tmp/{{ common.name }}_create_k8s_cluster.json"
#    mode: 0777
 
#- name: Create K8s Cluster
#  uri:
#    url: http://{{ groups.primary_controller[0] }}:8080/api/v2/k8scluster
#    return_content: yes
#    headers:
#      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}" 
#      accept: "*/*"
#      Content-Type: "application/json"
#    method: POST
#    body_format: json
#    body: "{{ lookup('file','/tmp/CICL_create_k8s_cluster.json') }}"
#    status_code: 201
#  register: cluster_res
  

- name: Log out of session
  uri:
    url: "{{ session_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}"  
    method: DELETE
    status_code: 204
  register: delsession_res

- debug:
    msg: "Session: {{ session_res.location  | urlsplit('path') }} -- Create K8s Cluster Result: {{ k8shost_res.status }}"

