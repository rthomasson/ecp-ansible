---
- name: Obtain session token
  uri:
    url: http://{{ primary_controller }}:8080/api/v1/login
    return_content: yes
    method: POST
    body_format: json
    body: { "name": "{{ credentials.site_admin_id }}", "password": "{{ credentials.site_admin_password }}" }
    status_code: 201
  register: session_res

- name: Create facts for kubeconfig file and context
  set_fact:
    kubeconfig_file: /tmp/kubeconfig_{{platform.name}}_{{k8s_cluster.name}}_{{credentials.site_admin_id}}.conf
    kube_context: {{platform.name}}-{{k8s_cluster.name}}-{{credentials.site_admin_id}}

- name: Create fact for the set of default master nodes
  set_fact:
    master_nodes: {{groups.k8s_master_nodes}}
  when: {{cluster_master_nodes is undefined }}

- name: Create fact for the set of master nodes specified by the user
  set_fact:
    master_nodes: {{cluster_master_nodes}}
  when: {{cluster_master_nodes is defined }}

- name: Create fact for the set of default worker nodes
  set_fact:
    worker_nodes: {{groups.k8s_worker_nodes}}
  when: {{cluster_worker_nodes is undefined }}

- name: Create fact for the set of worker nodes specified by the user
  set_fact:
    worker_nodes: {{cluster_worker_nodes}}
  when: {{cluster_worker_nodes is defined }}

  - name: Get Kubeconfig for current user
  uri:
    url: http://{{ primary_controller }}:8080/api/v2/k8skubeconfig
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}"
      accept: "text/yaml"
    method: GET
    dest: {{kubeconfig_file}}
    status_code: 200
  register: kubeconfig_res

- name: Authenticate k8s cluster user
  command: echo "y" | kubectl hpecp --kubeconfig={{kubeconfig_file}} refresh
  register: res
  failed_when: res.rc != 0

- name: label openebs controlplane nodes
  command: kubectl --kubeconfig={{kubeconfig_file}} --context={{kube_context}} label nodes {{ item }} "openebs.io/nodegroup"="openebs-controlplane"
  loop: "{{ cluster_cp_nodes }}"
  register: res
  failed_when: res.rc != 0

  - name: label openebs namespace
  command: kubectl --kubeconfig={{kubeconfig_file}} --context={{kube_context}} label namespace openebs
  register: res
  failed_when: res.rc != 0

- name: Install openebs
  command: kubectl --kubeconfig={{kubeconfig_file}} --context={{kube_context}} apply -f {{ k8s_openebs.manifest_file }}
  register: res
  failed_when: res.rc != 0

- name: Create Openebs Storage class
  command: kubectl --kubeconfig={{kubeconfig_file}} --context={{kube_context}} apply -f {{ k8s_openebs.storage_class_file }}
  register: res
  failed_when: res.rc != 0

- name: Create Openebs Persistant Volume Claim
  command: kubectl --kubeconfig={{kubeconfig_file}} --context={{kube_context}} apply -f {{ k8s_openebs.persistant_volume_claim_file }}
  register: res
  failed_when: res.rc != 0

  - name: Log out of session
  uri:
    url: "{{ session_res.location }}"
    return_content: yes
    headers:
      X-BDS-SESSION: "{{ session_res.location  | urlsplit('path') }}"
    method: DELETE
    status_code: 204
  register: delsession_res

- debug:
    msg: "End Openebs Install Session: {{ session_res.location  | urlsplit('path') }}"

